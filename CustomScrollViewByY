package com.shenqili.ui;

import android.content.Context;
import android.graphics.Canvas;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.widget.Scroller;

/**
 * Created by Shenqili on 2015/10/7.
 */
public class CustomScrollViewByY extends ViewGroup {
    private static final String TAG = "CustomScrollViewByY";
    private static final int PAGE_COUNT = 5;
    private static final int DURATION_TIME = 1200;
    private static final float SCROLL_SPEED = 400;  //秒/像素

    private int mScreenHeight;
    private int mScreenWidth;
    private int mStartY;
    private int mEndY;
    private int mLastY;
    private int currentPage;
    private int mTouchSlop;
    private int mMinimumVelocity;
    private int mMaximumVelocity;

    private VelocityTracker mVelocityTracker = null;
    private Scroller mScroller;
    private Context mContext;

    public CustomScrollViewByY(Context context) {
        this(context, null);
    }

    public CustomScrollViewByY(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public CustomScrollViewByY(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        mContext = context;
        init();
    }

    private void init() {
        mScroller = new Scroller(mContext);

        final ViewConfiguration configuration = ViewConfiguration.get(mContext);
        mTouchSlop = configuration.getScaledTouchSlop();
        mMinimumVelocity = configuration.getScaledMinimumFlingVelocity();
        mMaximumVelocity = configuration.getScaledMaximumFlingVelocity();
        Log.e("mMinimumVelocity",""+mMinimumVelocity);
        Log.e("mMaximumVelocity",""+mMaximumVelocity);

        DisplayMetrics dm = getResources().getDisplayMetrics();
        mScreenWidth = dm.widthPixels;    //得到宽度
        mScreenHeight = dm.heightPixels - getStatusBarHeight();  //得到屏幕显示区域的高度
        currentPage = 1;
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);

        int count = getChildCount();
        for (int i = 0; i < count; i++) {   //遍历通知所有子View对自身测量
            getChildAt(i).measure(widthMeasureSpec, heightMeasureSpec);
        }
    }

    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        int childCount = getChildCount();
        //设置ViewGroup高度
        MarginLayoutParams mLayoutParams = (MarginLayoutParams) getLayoutParams();
        mLayoutParams.height = mScreenHeight * childCount;
        setLayoutParams(mLayoutParams);
        for (int i = 0; i < childCount; i++) {  //设置子View的放置位置
            View child = getChildAt(i);
            if (child.getVisibility() != View.GONE) {
                child.layout(l, i * mScreenHeight, r, (i + 1) * mScreenHeight);
            }
        }
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        int ScrollY;    //相对于ViewGroup控件Y坐标子控件移动距离 getScrollY()
        int currentY = (int) event.getY();    //相对于ViewGroup控件Y坐标位置（0 - mScreenHeight）
        obtainVelocityTracker(event);
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                if (!mScroller.isFinished()) {
                    mScroller.abortAnimation();
                    // 若粘性滑动结束前继续按住滑动（或者仅仅点击），
                    // 此时按粘性滑动停止时的逻辑计算获取getScrollY的值，也就是滑动停止时候的页面高度
                    mStartY = (currentPage - 1) * mScreenHeight;
                } else {
                    mStartY = getScrollY();
                }
                mLastY = currentY;
                break;
            case MotionEvent.ACTION_MOVE:
                int deltaY = mLastY - currentY;
                mLastY = currentY;
                ScrollY = getScrollY();
                //预测判定移动后是否会超出顶末端界限
                if (deltaY < 0) {
                    if (ScrollY + deltaY > 0) {
                        scrollBy(0,deltaY);
                    }
                } else {
                    if (ScrollY + deltaY <= (PAGE_COUNT - 1) * mScreenHeight) {
                        scrollBy(0,deltaY);
                    }
                }
                break;
            case MotionEvent.ACTION_UP:
                mVelocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);  //速度单位：1000毫秒内移动的像素
                int initialVelocity = (int) mVelocityTracker.getYVelocity();
                Log.e("initialVelocity",""+initialVelocity);

                if ( (Math.abs(initialVelocity) > mMinimumVelocity)
                        && getChildCount() > 0) {

                    fling(-initialVelocity,mScreenHeight * (PAGE_COUNT - 1));
                }

                // 记录手势离开屏幕时的Y坐标
//                mEndY = getScrollY();
//                int dScrollY = mEndY - mStartY;
//                if (dScrollY > 0) {    //上拉
//                    if (dScrollY < mScreenHeight/3) {
//                        mScroller.startScroll(
//                                0,getScrollY(),
//                                0,-dScrollY,
//                                DURATION_TIME);
//                    } else {  //滑动至下一页
//                        mScroller.startScroll(
//                                0,getScrollY(),
//                                0,mScreenHeight - dScrollY,
//                                DURATION_TIME);
//                        currentPage++;
//                    }
//                } else if (dScrollY < 0) {              //下拉
//                    if (-dScrollY < mScreenHeight/3) {
//                        mScroller.startScroll(
//                                0,getScrollY(),
//                                0,-dScrollY,
//                                DURATION_TIME);
//                    } else {  //滑动到底部页
//                        mScroller.startScroll(
//                                0,getScrollY(),
//                                0,-mScreenHeight - dScrollY,
//                                DURATION_TIME);
//                        currentPage--;
//                    }
//                }
                recycleVelocityTracker();
                break;
        }
        postInvalidate();
        return true;
    }

    public void fling(int velocityY, int maxYScrollEdge) {
        if (getChildCount() > 0) {
            mScroller.fling(getScrollX(), getScrollY(), 0, velocityY, 0, 0, 0,
                    maxYScrollEdge);
            awakenScrollBars(0);
        }
    }

    @Override
    public void computeScroll() {
        super.computeScroll();
        if (mScroller.computeScrollOffset()) {
            scrollTo(0, mScroller.getCurrY());
            postInvalidate();
        }
    }

    @Override
    public void scrollBy(int x, int y) {
        super.scrollBy(x, y);
    }

    private void obtainVelocityTracker(MotionEvent event) {
        if (mVelocityTracker == null) {
            mVelocityTracker = VelocityTracker.obtain();
        }
        mVelocityTracker.addMovement(event);
    }

    private void recycleVelocityTracker() {
        if (mVelocityTracker != null) {
            mVelocityTracker.recycle();
            mVelocityTracker = null;
        }
    }

    /**
     * 用于获取状态栏的高度。
     * @return 返回状态栏高度像素值
     */
    public int getStatusBarHeight() {
        int statusBarHeight = 0;
        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
        if (resourceId > 0) {
            statusBarHeight = getResources().getDimensionPixelSize(resourceId);
        }
        return statusBarHeight;
    }
}
